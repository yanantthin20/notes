Hook
1.Introducing Hooks
-React 16.8.0 is the first release to support Hooks. When upgrading, don’t forget to update all packages, including React DOM. 
 React Native supports Hooks since the 0.59 release of React Native.
-Hooks allow you to reuse stateful logic without changing your component hierarchy.
- Hooks let you use more of React’s features without classes.

Motivation
-Hooks solve a wide variety of seemingly unconnected problems in React 
 that we’ve encountered over five years of writing and maintaining tens of thousands of components.

Hook at a Glance
-useState is a Hook.
-useState returns a pair: the current state value and a function that lets you update it.You can call this function from an event handler or somewhere else.
-The only argument to useState is the initial state.
-The initial state argument is only used during the first render.

Declaring multiple state variables
-You can use the State Hook more than once in a single component:

function ExampleWithManyStates() {
  // Declare multiple state variables!
  const [age, setAge] = useState(42);
  const [fruit, setFruit] = useState('banana');
  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);
  // ...
}

But what is a Hook?
-Hooks are functions that let you “hook into” React state and lifecycle features from function components. 
 Hooks don’t work inside classes — they let you use React without classes.
-React provides a few built-in Hooks like useState. You can also create your own Hooks to reuse stateful behavior between different components. 

Effect Hook
-The Effect Hook, useEffect, adds the ability to perform side effects from a function component. 
-It serves the same purpose as componentDidMount, componentDidUpdate, and componentWillUnmount in React classes, but unified into a single API. 
-Effects are declared inside the component so they have access to its props and state.
 By default, React runs the effects after every render — including the first render.
-Just like with useState, you can use more than a single effect in a component:


Rules of Hooks
-Hooks are JavaScript functions, but they impose two additional rules:
-Only call Hooks at the top level. Don’t call Hooks inside loops, conditions, or nested functions.
-Only call Hooks from React function components. Don’t call Hooks from regular JavaScript functions. 

Binding your own hooks
-Sometimes, we want to reuse some stateful logic between components.
 Traditionally, there were two popular solutions to this problem: higher-order components and render props.


-Custom Hooks are more of a convention than a feature. If a function’s name starts with ”use” and it calls other Hooks, we say it is a custom Hook.
-You can write custom Hooks that cover a wide range of use cases like form handling,
 animation, declarative subscriptions, timers, and probably many more we haven’t considered.


Other Hooks, 
-useContext, useReducer
-eg.const locale = useContext(LocaleContext);  const [todos, dispatch] = useReducer(todosReducer);

**************************************************************************************************************************************
3.Using the State Hook
-Hooks don’t work inside classes. But you can use them instead of writing classes.

When would I use a Hook? If you write a function component and realize you need to add some state to it, previously you had to convert it to a class.
 Now you can use a Hook inside the existing function component.

Declaring a State Variable
In a class,
class Example extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    };
  }

In a function component, we have no this, so we can’t assign or read this.state. Instead, we call the useState Hook directly inside our component:

import React, { useState } from 'react';

function Example() {
  // Declare a new state variable, which we'll call "count"
  const [count, setCount] = useState(0);

What do we pass to useState as an argument? The only argument to the useState() Hook is the initial state.
 Unlike with classes, the state doesn’t have to be an object. We can keep a number or a string if that’s all we need.
 In our example, we just want a number for how many times the user clicked, so pass 0 as initial state for our variable.
 (If we wanted to store two different values in state, we would call useState() twice.)

What does useState return? It returns a pair of values: the current state and a function that updates it. 
This is why we write const [count, setCount] = useState(). This is similar to this.state.count and this.setState in a class, except you get them in a pair.

 var fruitStateVariable = useState('banana'); // Returns a pair
  var fruit = fruitStateVariable[0]; // First item in a pair
  var setFruit = fruitStateVariable[1]; // Second item in a pair

#Using [0] and [1] to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.

Using Multiple State Variables

-Declaring state variables as a pair of [something, setSomething] is also handy because it lets us give different names to different state variables if we want to use more than one:
function ExampleWithManyStates() {
  // Declare multiple state variables!
  const [age, setAge] = useState(42);
  const [fruit, setFruit] = useState('banana');
  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);
In the above component, we have age, fruit, and todos as local variables, and we can update them individually:

  function handleOrangeClick() {
    // Similar to this.setState({ fruit: 'orange' })
    setFruit('orange');
  }
You don’t have to use many state variables. State variables can hold objects and arrays just fine, so you can still group related data together. 
However, unlike this.setState in a class, updating a state variable always replaces it instead of merging it.
************************************************************************************************************************************
4.Using the Effect Hook

What does useEffect do? By using this Hook, you tell React that your component needs to do something after render. 
React will remember the function you passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates. 
In this effect, we set the document title, but we could also perform data fetching or call some other imperative API.

Why is useEffect called inside a component? Placing useEffect inside the component lets us access the count state variable (or any props) right from the effect. 

Does useEffect run after every render? Yes! By default, it runs both after the first render and after every update.

#Unlike componentDidMount or componentDidUpdate, effects scheduled with useEffect don’t block the browser from updating the screen. 
This makes your app feel more responsive. 

Why did we return a function from our effect? This is the optional cleanup mechanism for effects. Every effect may return a function that cleans up after it. 
This lets us keep the logic for adding and removing subscriptions close to each other.

When exactly does React clean up an effect? React performs the cleanup when the component unmounts. However, as we learned earlier, effects run for every render and not just once. 
This is why React also cleans up effects from the previous render before running the effects next time


Optimizing Performance by Skipping Effects
-In some cases, cleaning up or applying the effect after every render might create a performance problem. 
-In class components, we can solve this by writing an extra comparison with prevProps or prevState inside componentDidUpdate:

componentDidUpdate(prevProps, prevState) {
  if (prevState.count !== this.state.count) {
    document.title = `You clicked ${this.state.count} times`;
  }
}


useEffect(() => {
  document.title = `You clicked ${count} times`;
}, [count]); // Only re-run the effect if count changes
In the example above, we pass [count] as the second argument. What does this mean? If the count is 5, and then our component re-renders with count still equal to 5,
 React will compare [5] from the previous render and [5] from the next render. Because all items in the array are the same (5 === 5),
 React would skip the effect. That’s our optimization.

If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array ([]) as a second argument.

effect cleanup avoids duplication in componentDidUpdate and componentWillUnmount, brings related code closer together, and helps us avoid bugs.
********************************************************************************************************************************
Using a hook
Only Call Hooks at the Top Level
Don’t call Hooks inside loops, conditions, or nested functions. Instead, always use Hooks at the top level of your React function

Only Call Hooks from React Functions
Don’t call Hooks from regular JavaScript functions. Instead, you can:

✅ Call Hooks from React function components.
✅ Call Hooks from custom Hooks
By following this rule, you ensure that all stateful logic in a component is clearly visible from its source code.

ESLint Plugin
We released an ESLint plugin called eslint-plugin-react-hooks that enforces these two rules. 

This plugin is included by default in Create React App.

npm install eslint-plugin-react-hooks --save-dev
// Your ESLint configuration
{
  "plugins": [
    // ...
    "react-hooks"
  ],
  "rules": {
    // ...
    "react-hooks/rules-of-hooks": "error", // Checks rules of Hooks
    "react-hooks/exhaustive-deps": "warn" // Checks effect dependencies
  }
}
*************************************************************************************************************************************************

Building YOur Own Hooks

-Building your own Hooks lets you extract component logic into reusable functions.
-Two popular ways to share stateful logic between components:
-render props and higher-order components.

Extracting a Custom Hook
-When we want to share logic between two JavaScript functions, we extract it to a third function. Both components and Hooks are functions, so this works for them too!
Do I have to name my custom Hooks starting with “use”? Please do. This convention is very important. 
Without it, we wouldn’t be able to automatically check for violations of rules of Hooks 
because we couldn’t tell if a certain function contains calls to Hooks inside of it.

Do two components using the same Hook share state? No. Custom Hooks are a mechanism to reuse stateful logic (such as setting up a subscription and remembering the current value), 
but every time you use a custom Hook, all state and effects inside of it are fully isolated.

useYourImagination()

Custom Hooks offer the flexibility of sharing logic that wasn’t possible in React components before. 
You can write custom Hooks that cover a wide range of use cases like form handling, animation, declarative subscriptions, timers, and probably many more we haven’t considered. 
What’s more, you can build Hooks that are just as easy to use as React’s built-in features.

*************************************************************************************************************************************

Hooks API Reference

Basic Hooks
	useState
	useEffect
	useContext
	Additional Hooks

useReducer
	useCallback
	useMemo
	useRef
	useImperativeHandle
	useLayoutEffect
	useDebugValue


Basic Hooks
useState
const [state, setState] = useState(initialState);
Returns a stateful value, and a function to update it.

During the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).

The setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component.

setState(newState);
During subsequent re-renders, the first value returned by useState will always be the most recent state after applying updates.

Note

React guarantees that setState function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the useEffect or useCallback dependency list.


Note
Unlike the setState method found in class components, useState does not automatically merge update objects. You can replicate this behavior by combining the function updater form with object spread syntax:

setState(prevState => {
  // Object.assign would also work
  return {...prevState, ...updatedValues};
});
Another option is useReducer, which is more suited for managing state objects that contain multiple sub-values.

Lazy initial state
The initialState argument is the state used during the initial render. In subsequent renders, it is disregarded. If the initial state is the result of an expensive computation, you may provide a function instead, which will be executed only on the initial render:

const [state, setState] = useState(() => {
  const initialState = someExpensiveComputation(props);
  return initialState;
});


useContext
const value = useContext(MyContext);
Accepts a context object (the value returned from React.createContext) and returns the current context value for that context. The current context value is determined by the value prop of the nearest <MyContext.Provider> above the calling component in the tree.

Don’t forget that the argument to useContext must be the context object itself:

Correct: useContext(MyContext)
Incorrect: useContext(MyContext.Consumer)
Incorrect: useContext(MyContext.Provider)
A component calling useContext will always re-render when the context value changes. If re-rendering the component is expensive, you can optimize it by using memoization.

If you’re familiar with the context API before Hooks, useContext(MyContext) is equivalent to static contextType = MyContext in a class, or to <MyContext.Consumer>.

useContext(MyContext) only lets you read the context and subscribe to its changes. You still need a <MyContext.Provider> above in the tree to provide the value for this context.

useReducer
const [state, dispatch] = useReducer(reducer, initialArg, init);
An alternative to useState. Accepts a reducer of type (state, action) => newState, and returns the current state paired with a dispatch method. (If you’re familiar with Redux, you already know how this works.)

useReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. 
useReducer also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks.

Specifying the initial state
There are two different ways to initialize useReducer state. You may choose either one depending on the use case. The simplest way is to pass the initial state as a second argument:

  const [state, dispatch] = useReducer(
    reducer,
    {count: initialCount}
  );
Note

React doesn’t use the state = initialState argument convention popularized by Redux. The initial value sometimes needs to depend on props and so is specified from the Hook call instead. 
If you feel strongly about this, you can call useReducer(reducer, undefined, reducer) to emulate the Redux behavior, but it’s not encouraged.

useCallback
const memoizedCallback = useCallback(
  () => {
    doSomething(a, b);
  },
  [a, b],
);
Returns a memoized callback.

Pass an inline callback and an array of dependencies. useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. shouldComponentUpdate).

useCallback(fn, deps) is equivalent to useMemo(() => fn, deps).

Note

The array of dependencies is not passed as arguments to the callback. Conceptually, though, that’s what they represent: every value referenced inside the callback should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.

************************************************************************************************************************************************************************
Hooks FAQ

How much of my React knowledge stays relevant?
Hooks are a more direct way to use the React features you already know — such as state, lifecycle, context, and refs. They don’t fundamentally change how React works, and your knowledge of components, props, and top-down data flow is just as relevant.

What do Hooks mean for popular APIs like Redux connect() and React Router?
-You can continue to use the exact same APIs as you always have; they’ll continue to work.
-React Redux since v7.1.0 supports Hooks API and exposes hooks like useDispatch or useSelector.
-React Router supports hooks since v5.1.
-Other libraries might support hooks in the future too.


How to test components that use Hooks?
From React’s point of view, a component using Hooks is just a regular component. If your testing solution doesn’t rely on React internals, testing components with Hooks shouldn’t be different from how you normally test components.


How do lifecycle methods correspond to Hooks?
  .constructor: Function components don’t need a constructor. You can initialize the state in the useState call. If computing the initial state is expensive, you can pass a function to useState.
  .getDerivedStateFromProps: Schedule an update while rendering instead.
   .shouldComponentUpdate: See React.memo below.
   .render: This is the function component body itself.
   .componentDidMount, componentDidUpdate, componentWillUnmount: The useEffect Hook can express all combinations of these (including less common cases).
   .getSnapshotBeforeUpdate, componentDidCatch and getDerivedStateFromError: There are no Hook equivalents for these methods yet, but they will be added soon.


How can I do data fetching with Hooks?
Here is a small demo to get you started. To learn more, check out this article about data fetching with Hooks.

Is there something like instance variables?
Yes! The useRef() Hook isn’t just for DOM refs. The “ref” object is a generic container whose current property is mutable and can hold any value, similar to an instance property on a class.

You can write to it from inside useEffect:

function Timer() {
  const intervalRef = useRef();

  useEffect(() => {
    const id = setInterval(() => {
      // ...
    });
    intervalRef.current = id;
    return () => {
      clearInterval(intervalRef.current);
    };
  });

  // ...
}
If we just wanted to set an interval, we wouldn’t need the ref (id could be local to the effect), but it’s useful if we want to clear the interval from an event handler:

  // ...
  function handleCancelClick() {
    clearInterval(intervalRef.current);
  }
  // ...
Conceptually, you can think of refs as similar to instance variables in a class. Unless you’re doing lazy initialization, avoid setting refs during rendering — this can lead to surprising behavior. Instead, typically you want to modify refs in event handlers and effects.

If for some reason you can’t move a function inside an effect, there are a few more options:

You can try moving that function outside of your component. In that case, the function is guaranteed to not reference any props or state, and also doesn’t need to be in the list of dependencies.
If the function you’re calling is a pure computation and is safe to call while rendering, you may call it outside of the effect instead, and make the effect depend on the returned value.
As a last resort, you can add a function to effect dependencies but wrap its definition into the useCallback Hook. This ensures it doesn’t change on every render unless its own dependencies also change:
function ProductPage({ productId }) {
  // ✅ Wrap with useCallback to avoid change on every render
  const fetchProduct = useCallback(() => {
    // ... Does something with productId ...
  }, [productId]); // ✅ All useCallback dependencies are specified

  return <ProductDetails fetchProduct={fetchProduct} />;
}

function ProductDetails({ fetchProduct }) {
  useEffect(() => {
    fetchProduct();
  }, [fetchProduct]); // ✅ All useEffect dependencies are specified
  // ...
}

How do I implement shouldComponentUpdate?
You can wrap a function component with React.memo to shallowly compare its props:

const Button = React.memo((props) => {
  // your component
});
It’s not a Hook because it doesn’t compose like Hooks do. React.memo is equivalent to PureComponent, but it only compares props. (You can also add a second argument to specify a custom comparison function that takes the old and new props. If it returns true, the update is skipped.)

React.memo doesn’t compare state because there is no single state object to compare. But you can make children pure too, or even optimize individual children with useMemo.

Under the Hood
How does React associate Hook calls with components?
React keeps track of the currently rendering component. Thanks to the Rules of Hooks, we know that Hooks are only called from React components (or custom Hooks — which are also only called from React components).

There is an internal list of “memory cells” associated with each component. They’re just JavaScript objects where we can put some data. When you call a Hook like useState(), it reads the current cell (or initializes it during the first render), and then moves the pointer to the next one. This is how multiple useState() calls each get independent local state.

******************************************************************************************************************************************************************************************************************************************************************************************************

































